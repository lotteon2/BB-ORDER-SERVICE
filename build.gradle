buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'kr.bb'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.8")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.github.lotteon-maven:blooming-blooms-utils:202401160417'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.4.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-aws-messaging:2.2.4.RELEASE'
    implementation 'software.amazon.awssdk:sns:2.21.37'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers:1.17.6"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    implementation 'io.micrometer:micrometer-registry-prometheus:1.12.2'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

// querydsl 사용할 경로 지정합니다. 현재 지정한 부분은 .gitignore에 포함되므로 git에 올라가지 않습니다.
def querydslDir = "$buildDir/generated/'querydsl'"

// JPA 사용여부 및 사용 경로 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

// build시 사용할 sourceSet 추가 설정
sourceSets {
    main.java.srcDir querydslDir
}

// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

// jacoco
jacoco {
    toolVersion = '0.8.5'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            def Qdomains = []
            for(qPattern in '**/QA'..'**/QZ'){
                Qdomains.add(qPattern + '*')
            }
            afterEvaluate {
                classDirectories.setFrom(
                        files(classDirectories.files.collect {
                            fileTree(dir: it, excludes: [
                                    "**/*Exception.class",
                                    "**/*Controller.class",
                                    "**/*Dto.class",
                                    "**/*Request.class",
                                    "**/*Response.class",
                                    "**/*Id.class",
                                    "**/*Application*",
                                    "**/GetStoreInfoFeignRequestFacade.class",
                                    "**/*Publisher.class",
                                    "**/*Mapper.class",
                                    "**/*FeignHandler.class",
                                    "**/*Listener.class",
                                    "**/*Publisher.class",
                                    "**/*SqsService.class",
                                    "**/SettlementDataHandler.class",
                                    "**/ProcessingSettlementDataService.class",
                                    "**/*CustomImpl.class",
                            ]+Qdomains)
                        })
                )
            }
        }
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.required = true
    }
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Exception.class",
                            "**/*Controller.class",
                            "**/*Dto.class",
                            "**/*Request.class",
                            "**/*Response.class",
                            "**/*Id.class",
                            "**/*Application*",
                            "**/GetStoreInfoFeignRequestFacade.class",
                            "**/*Publisher.class",
                            "**/*Mapper.class",
                            "**/*FeignHandler.class",
                            "**/*Listener.class",
                            "**/*SqsService.class",
                            "**/SettlementDataHandler.class",
                            "**/ProcessingSettlementDataService.class",
                            "**/*CustomImpl.class",
                    ]+Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
